{-# LANGUAGE OverloadedStrings #-}

module FirstPrinciples.ExerciseHitCount where

import           Control.Monad.Trans.Class
import           Control.Monad.Trans.Reader
import           Data.IORef
import qualified Data.Map                   as M
import           Data.Maybe                 (fromMaybe)
import           Data.Text.Lazy             (Text)
import qualified Data.Text.Lazy             as TL
import           System.Environment         (getArgs)
import           Web.Scotty
import           Web.Scotty.Trans

-- answer:
-- https://github.com/scarvalhojr/haskellbook/blob/master/chapter26/hitcounter/app/Main.hs

-- We're going to provide an initial scaffold of a Scotty application
-- which counts hits to specific URIs. It also prefixes the keys with a
-- prefix defined on app initialization, retrieved via the command-line
-- arguments.
data Config =
  Config {
    -- that's one, one click!
    -- two...two clicks!
    -- Three BEAUTIFUL clicks! ah ah ahhhh
    counts :: IORef (M.Map Text Integer)
  , prefix :: Text
  }

-- Stuff inside ScottyT is, except for things that escape
-- via IO, effectively read-only so we can't use StateT.
-- It would overcomplicate things to attempt to do so and
-- you should be using a proper database for production
-- applications.
type Scotty = ScottyT Text (ReaderT Config IO)
type Handler = ActionT Text (ReaderT Config IO)

-- bumpBoomp :: Text
--           -> M.Map Text Integer
--           -> (M.Map Text Integer, Integer)
-- bumpBoomp k m = undefined

app :: Scotty ()
app = undefined
-- app =
--   get "/:key" $ do
--     unprefixed <- param "key"
--     let key' = mappend prefix unprefixed
--     newInteger <- undefined
--     html $ mconcat [ "<h1>Success! Count was: "
--                    , TL.pack $ show newInteger
--                    , "</h1>"
--                    ]

main :: IO ()
main = do
  [prefixArg] <- getArgs
  counter <- newIORef M.empty
  let config = Config counter (TL.pack prefixArg)
      runR :: Scotty () -> ScottyM ()
      -- ScottyT Text (ReaderT Config IO)
      -- to
      -- ScottyT Text IO
      runR x = do
        r <- x
        return $ runReaderT r config

  -- ScottyT Text (ReaderT Config IO) ()
  -- scottyT
  -- ReaderT Config IO (Scotty Text)
  -- runReaderT
  -- IO ->

  scotty 3000 (runR app)
